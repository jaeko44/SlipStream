#!/bin/bash

# Script to maintain the SlipStream* repos up to date
#
#   - Copy it out of this 'tools' folder to the root folder where you
#     want to clone the SlipStream* repos.
#
#   - Running the script in a clean directory will git clone all
#     SliStream* repos within the current directory.
#
#   - If the repo folders are already present, the script will update
#     them with git pull. Note that the branch will not be changed.
#
#   - After the git clone or pull actions, all projects will be build
#     in the right order using mvn clean install. You can use --with-tests to
#     include the tests. Note that after a mvn clean some projects
#     require the tests to be build to work.
#
#   - To see the full output of each command use -v.

# Required for the pylint execution in project SlipStreamClient
export LC_CTYPE="en_US.UTF-8"

OK="$(tput setaf 2) OK$(tput sgr0)"
ERROR="$(tput setaf 1) ERROR$(tput sgr0)"

GIT_PULL_HAD_ERROR="false"
MVN_INSTALL_HAD_ERROR="false"

REPOS=()
REPOS+=("SlipStream")
REPOS+=("SlipStreamUI")
REPOS+=("SlipStreamServer")
REPOS+=("SlipStreamServerDeps")
REPOS+=("SlipStreamClient")
REPOS+=("SlipStreamClientAPI")
REPOS+=("SlipStreamConnectors")

exec 3>&1
exec 4>&2

pecho() {
  echo -n "${1}" 1>&3
}

pecholn() {
  echo "${1}" 1>&3
}

SKIP_TESTS="true"
if [ "${1}" == "--with-tests" ]
then
  SKIP_TESTS="false"
  shift
fi

VERBOSE="false"
if [ "${1}" == "-v" ]
then
  VERBOSE="true"
  shift
fi

BUILD_SEPARATE_MODULES="false"
if [ "${1}" == "--separate-modules" ]; then
  BUILD_SEPARATE_MODULES="true"
  shift
fi

if [ "${1}" != "" ]; then
  echo "$(basename $0): invalid option: ${1}."
  echo "$(basename $0): only --with-tests, -v and --separate-modules are valid in that order."
  exit 1
fi

if ! $VERBOSE
then
  exec 1>/dev/null
  exec 2>/dev/null
fi


git_branch(){
  pecho $(git rev-parse --abbrev-ref HEAD)
}

update_ss_repo(){
  if [ -d ${1} ]
  then
    pecho "  - Updating ${1}... "
    (cd ${1}; git_branch; if git pull && git gc --auto; then pecholn "$OK"; else pecholn "$ERROR"; exit 1; fi;) || GIT_PULL_HAD_ERROR="true";
  else
    pecho "  - Repo ${1} is not yet cloned here. Cloning ${1}... "
    git clone git@github.com:slipstream/${1}.git && pecholn "$OK" || pecholn "$ERROR"
  fi
  echo
}

install_project(){
  if [ -d ${1} ]
  then
    pecho "  - Installing ${1}... "
    (cd ${1}; git_branch; if mvn clean install --update-snapshots -DskipModules=true -Dmaven.test.skip=$SKIP_TESTS; then pecholn "$OK"; else pecholn "$ERROR"; exit 1; fi;) || MVN_INSTALL_HAD_ERROR="true";
  else
    pecholn "  - Project ${1} not found. Skipping."
  fi
  echo
}

pecholn "Updating repos:"

for repo in "${REPOS[@]}"
do
  update_ss_repo $repo
done

if $GIT_PULL_HAD_ERROR
then
  pecholn
  pecholn "Some repos didn't update successfully. You might have uncommitted changes. Please fix it and re-run this command."
  exit 1
fi

pecholn
pecholn "Installing projects:"

if $BUILD_SEPARATE_MODULES; then
  for repo in "${REPOS[@]}"
  do
    install_project $repo
  done
else
  (cd SlipStream && mvn clean install --update-snapshots --fail-at-end  -Dmaven.test.skip=$SKIP_TESTS 1>&3 2>&4;)
fi

if $MVN_INSTALL_HAD_ERROR
then
  pecholn
  pecholn "Verify following common mistakes:"
  pecholn "  - All maven versions must be consistent (including the SlipStreamUI project)"
  pecholn "  - Use 'export LC_CTYPE=\"en_US.UTF-8\"' for pylint in project 'SlipStreamClient' (automatically done with this script)"
  pecholn
  pecholn "Try building the project with:"
  pecholn "  (cd SlipStream; touch .slipstream-build-all; mvn clean install; rm .slipstream-build-all)"
  pecholn "Source: https://github.com/slipstream/SlipStream/tree/master#build-everything"
  pecholn
  exit 1
fi


exit

